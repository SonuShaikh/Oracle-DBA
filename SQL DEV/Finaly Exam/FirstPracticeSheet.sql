--SQL SELECT STATEMENT
SELECT * FROM HR.EMPLOYEES;
SELECT FIRST_NAME,LAST_NAME FROM HR.EMPLOYEES;
SELECT FIRST_NAME,LAST_NAME,SALARY FROM HR.EMPLOYEES WHERE SALARY IN (SELECT MAX(SALARY) FROM HR.EMPLOYEES GROUP BY DEPARTMENT_ID);
DESC HR.EMPLOYEES;

SELECT FIRST_NAME,MANAGER_ID,EMPLOYEE_ID FROM HR.EMPLOYEES;
SELECT EMP.FIRST_NAME  EMPLOYEE_NAME,MANG.FIRST_NAME  MANAGAER_NAME,MANG.MANAGER_ID FROM HR.EMPLOYEES EMP INNER JOIN HR.EMPLOYEES MANG 
ON (EMP.MANAGER_ID = MANG.EMPLOYEE_ID AND MANG.MANAGER_ID = 100);
SELECT FIRST_NAME FROM HR.EMPLOYEES WHERE MANAGER_ID = 100;
DESC HR.EMPLOYEES;
SELECT DISTINCT DEPARTMENT_ID FROM HR.EMPLOYEES;
SELECT COUNT(EMPLOYEE_ID) AS NOOFEMPWORKINGINDEPT2 FROM HR.EMPLOYEES WHERE DEPARTMENT_ID = 30;
--Ques.2. Write a SQL query to fetch employee names 
--having salary greater than or equal to 5000 and less than or equal 10000.
SELECT FIRST_NAME FROM HR.EMPLOYEES
WHERE EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM HR.EMPLOYEES WHERE SALARY BETWEEN 5000 AND 10000);--(SELECT EMPLOYEE_ID FROM HR.EMPLOYEES WHERE SALARY >= 5000 AND SALARY <= 10000);
--Ques.3. Write a SQL query to fetch DEPARTMENT-wise count of employees sorted by project's count in descending order
SELECT COUNT(EMPLOYEE_ID) AS NOEMP,DEPARTMENT_ID FROM HR.EMPLOYEES 
GROUP BY DEPARTMENT_ID 
ORDER BY 1;

CREATE TABLE NAMEDEMO ( FULLNAME VARCHAR2(30));
INSERT INTO NAMEDEMO VALUES('SHAIKH SHAHABAJ MUBARAK');
--Ques.4. Write a query to fetch only the first name(string before space) from the FullName column of EmployeeDetails table.
SELECT FULLNAME FROM NAMEDEMO;
SELECT SUBSTR(FULLNAME,0,INSTR(FULLNAME,' ')) AS FIRST_NAME FROM NAMEDEMO;
--Ques.5. Write a query to fetch employee names and salary records. Return employee details 
--even if the salary record is not present for the employee.
SELECT E1.FIRST_NAME,E1.SALARY FROM HR.EMPLOYEES E1 LEFT OUTER JOIN HR.EMPLOYEES E2
ON E1.EMPLOYEE_ID = E2.EMPLOYEE_ID;
SELECT FIRST_NAME,SALARY FROM HR.EMPLOYEES WHERE SALARY IS NULL;
--Ques.6. Write a SQL query to fetch all the Employees who are also managers from EmployeeDetails table.
SELECT DISTINCT M.FIRST_NAME,M.EMPLOYEE_ID AS MANAGER_ID FROM HR.EMPLOYEES M INNER JOIN HR.EMPLOYEES E ON(M.EMPLOYEE_ID = E.MANAGER_ID);
--Ques.7. Write a SQL query to fetch all employee records from EmployeeDetails table who have a salary 
--record in EmployeeSalary table.
CREATE TABLE EMPSALARY ( EMP_ID NUMBER,EMPSAL NUMBER);
INSERT INTO EMPSALARY VALUES(&EMP_ID,&EMPSAL);
select * from empsalary;
update empsalary set emp_id = 102 where emp_id = 12365;
SELECT * FROM HR.EMPLOYEES E
WHERE EXISTS (SELECT * FROM EMPSALARY ES WHERE E.EMPLOYEE_ID = ES.EMP_ID); 
CREATE TABLE DRECORDS ( FNAME VARCHAR2(20),LNAME VARCHAR2(30),EMPID NUMBER);
INSERT INTO DRECORDS VALUES('SOU','ONU',136454);
SELECT * FROM DRECORDS;
-- FIND OUT THE DUPLICATE RECORDS
SELECT FNAME,LNAME,EMPID, COUNT(*) FROM DRECORDS
GROUP BY FNAME,LNAME,EMPID
HAVING COUNT(*) > 1;
-- DELETE THE DUPLICATE RECORDS
DELETE FROM DRECORDS WHERE EMPID IN
(
 SELECT EMPID FROM DRECORDS
 GROUP BY EMPID,FNAME,LNAME
 HAVING COUNT(*) > 1);

DESCRIBE DRECORDS;
DROP TABLE DRECORDS;
SELECT SYSTIMESTAMP FROM DUAL;

--CREATE TABLE STATEMENTS
CREATE TABLE DEMOTABLE
(
 FNAME VARCHAR2(30),
 LNAME VARCHAR2(30),
 EMPID NUMBER CONSTRAINT DT_EMPID_PK PRIMARY KEY
 );

ALTER TABLE DEMOTABLE DISABLE CONSTRAINT DT_EMPID_PK;
ALTER TABLE DEMOTABLE DROP CONSTRAINT DT_EMPID_PK;

DROP TABLE DEMOTABLE;
CREATE TABLE DEMOTABLE( FNAME VARCHAR2(20),LNAME VARCHAR2(30),EMPID NUMBER,PHONE NUMBER );
--CONSTRAINT DT_EMPID_PK PRIMARY KEY (EMPID));

ALTER TABLE DEMOTABLE ADD CONSTRAINT DT_EMPID_PK PRIMARY KEY(EMPID);
--COMPOSITE PRIMARY KEY
ALTER TABLE DEMOTABLE ADD CONSTRAINT DT_COMPK_EMPID_PH PRIMARY KEY(EMPID,PHONE);
ALTER TABLE DEMOTABLE DISABLE CONSTRAINT DT_COMPK_EMPID_PH;
ALTER TABLE DEMOTABLE ENABLE CONSTRAINT DT_COMPK_EMPID_PH;

DESCRIBE USER_CONSTRAINTS;
SELECT CONSTRAINT_NAME,
CONSTRAINT_TYPE,
TABLE_NAME,
DELETE_RULE,
STATUS
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'DEMOTABLE';
--USER_CONS_COLUMNS
DESCRIBE USER_CONS_COLUMNS;
SELECT CONSTRAINT_NAME FROM USER_CONS_COLUMNS;

--FOREIGN KEY
CREATE TABLE DEMOTABLEFK (
EMPID NUMBER CONSTRAINT DTFK_EMPID_FK REFERENCES DEMOTABLE(EMPID) ON DELETE SET NULL,
SALARY NUMBER,
JDATE VARCHAR2(30));

ALTER TABLE DEMOTABLEFK ADD CONSTRAINT DTFK_EMPID_FK FOREIGN KEY (EMPID) REFERENCES DEMOTABLE(EMPID);
SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE FROM USER_CONSTRAINTS WHERE TABLE_NAME ='DEMOTABLEFK';
DROP TABLE DEMOTABLEFK;
ALTER TABLE DEMOTABLEFK DROP CONSTRAINT DTFK_EMPID_FK;
DESC DEMOTABLE;
DESC DEMOTABLEFK;

INSERT INTO DEMOTABLE VALUES('&FNAME','&LNAME',&EMPID);
INSERT INTO DEMOTABLEFK VALUES(&EMPID,&SALARY,'&JDATE');

SELECT * FORM DEMOTABLE;
SELECT * FROM DEMOTABLEFK;
DELETE FROM DEMOTABLEFK WHERE EMPID = 12;
ROLLBACK;

-- PRIMARYK KEY FOREIGN
CREATE TABLE EMP
(
 FIRST_NAME VARCHAR2(30),
 EMP_ID NUMBER CONSTRAINT EMP_ID_PK PRIMARY KEY,
 LAST_NAME VARCHAR2(30));
 ALTER TABLE EMP ADD DEPT_ID NUMBER UNIQUE NOT NULL;
 INSERT INTO EMP VALUES('&FIRST_NAME',&EMP_ID,'&LAST_NAME',&DEPT_ID);
CREATE TABLE DEPT
(
 DEPT_NAME VARCHAR2(30),
 MANG_NAME VARCHAR2(30),
 DEPT_ID NUMBER CONSTRAINT DEPT_ID_FK REFERENCES EMP(DEPT_ID) 
 );
ALTER TABLE DEPT DROP CONSTRAINT DEPT_ID_FK; 
ALTER TABLE DEPT ADD CONSTRAINT DEPT_ID_FK FOREIGN KEY(DEPT_ID) REFERENCES EMP(DEPT_ID) ON DELETE SET NULL;
INSERT INTO DEPT VALUES('&DEPT_NAME','&MANG_NAME',&DEPT_ID);
DESC EMP;
DESC DEPT;

SELECT * FROM EMP;
SELECT * FROM DEPT;
DELETE FROM EMP WHERE EMP_ID = 1;


--LIMIT THE ROW AND  RETRIEVE BY THE QUERY.
SELECT * FROM HR.EMPLOYEES WHERE ROWNUM <= 10 ORDER BY SALARY DESC;
SELECT * FROM HR.EMPLOYEES WHERE DEPARTMENT_ID = &DEPART_NAME;

SELECT MANAGER_ID, COUNT(*) FROM HR.EMPLOYEES GROUP BY MANAGER_ID;
SELECT MANAGER_ID, COUNT(*) FROM HR.EMPLOYEES GROUP BY MANAGER_ID HAVING COUNT(*) BETWEEN 6 AND 10 ORDER BY 2;

SELECT FIRST_NAME,
( SELECT MANAGER_ID,COUNT(*) FROM HR.EMPLOYEES GROUP BY MANAGER_ID) 
FROM HR.EMPLOYEES; 
WHERE MANAGER_ID = EMPLOYEE_ID;
SELECT FIRST_NAME FROM HR.EMPLOYEES E JOIN HR.EMPLOYEES M ON ( M.MANAGER_ID = E.EMPLOYEE_ID);

SELECT MANAGER_ID, COUNT(*) FROM HR.EMPLOYEES WHERE MANAGER_ID BETWEEN 100 AND 110 GROUP BY MANAGER_ID;

--SINGLE ROW FUNCTIONS
--CHARACTER
--UPPER
SELECT UPPER('sonu monu shaikh') FROM DUAL;
--LOWER
SELECT LOWER('SONU SHAIKH MONU') FROM DUAL;
--INITCAP
SELECT INITCAP('sonu shaikh monu pappu') FROM DUAL;
--RTRIM
SELECT RTRIM('SONU SHAIKH ************','*') FROM DUAL;
--LTRIM
SELECT LTRIM('******** SONU SHAIKH','*') FROM DUAL;
SELECT LTRIM('GOOD MORNING','GOOD') FROM DUAL;
-- TRIM
SELECT TRIM('               SONU               ') FROM DUAL;
SELECT TRIM('S' FROM 'SONU SHAIKH') FROM DUAL;
-- SUBSTR
SELECT SUBSTR('SONU SHAIKH',6,9) FROM DUAL;
SELECT SUBSTR(' rEBILLIONRIDER BUCKY ROBERS',-1) FROM DUAL;

--STRIN RETURN POSOTION NUMBER OF SPECIFIC STRING.
SELECT INSTR('HELLO WORLD','W') FROM DUAL;
--LPAD
SELECT LPAD('****SONU',10,'#') FROM DUAL; -- OP ##****SONU
--RPAD 
SELECT RPAD('SONUSHAIKH',15,'&') RESULT FROM DUAL;
--LENGTH
SELECT LENGTH('SONU SHAIKH KHAN PAPPU PAPPAL') LEN FROM DUAL;

-- DATE FUNCTION
--SYSDATE
SELECT SYSDATE FROM DUAL;
SELECT SYSTIMESTAMP FROM DUAL;

-- ADD_MONTHS
SELECT ADD_MONTHS(SYSDATE,6) FROM DUAL;

-- NEXT_DAY
SELECT NEXT_DAY(SYSDATE,'WEDNESDAY') FROM DUAL;
--LAST_DAY
SELECT LAST_DAY(SYSDATE) FROM DUAL;
--MONTHS_BETWEEN
SELECT MONTHS_BETWEEN(SYSDATE,'11-APR-15') FROM DUAL;
SELECT NEW_TIME('01-JUN-18','IST','EST') FROM DUAL;

SELECT NEW_TIME(SYSDATE,'GMT','EST') FROM DUAL;

-- conversion functions
SELECT TO_CHAR(SYSDATE,'DD/MM/YY') AS DATE_CONVERSION FROM DUAL;
SELECT TO_CHAR(96238586000) FROM DUAL;
SELECT CONCAT(FIRST_NAME,TO_CHAR(SALARY)) CONCATINATION FROM HR.EMPLOYEES;
SELECT MAX(LENGTH(FIRST_NAME)) FROM HR.EMPLOYEES;
-- NOT WORKED-- SELECT RPAD(FIRST_NAME,MAX(LENGTH(FIRST_NAME)),'#') FROM HR.EMPLOYEES;
--TO_DATE
SELECT TO_DATE('30-APRIL-2018') AS DATE_ FROM DUAL;
DESCRIBE HR.EMPLOYEES;
SELECT TO_CHAR(HIRE_DATE,'DD/MM/YY HH:MI:SS') DATE_ FROM HR.EMPLOYEES;
-- TO_NUMBER
SELECT TO_NUMBER(TO_CHAR(HIRE_DATE,'DDMMYY')) * 10 AS NUMBER_ FROM HR.EMPLOYEES;

-- NUMERIC FUNCTION
--ABSOLUTE --REMOVE - SING 
SELECT ABS(-9658) FROM DUAL; --9685
--CEIL
SELECT CEIL(12.98) FROM DUAL; --13
--ROUND
SELECT ROUND(12.98) FROM DUAL; -- 13
--conditional expression
SELECT * FROM HR.DEPARTMENTS;
--SIMPLE CASE EXPRESSION
--EXAPLE 1
SELECT 
( CASE 'DOG'
 WHEN 'DOG' THEN 'BHOO'
 WHEN 'CAT' THEN 'MAOU'
 WHEN 'SNAKE' THEN 'PHISS'
 WHEN 'FOX' THEN 'OWWW'
 WHEN 'DOG' THEN 'DOG2 '
 ELSE 'SORRRY :)'
 END) AS DOGGI
 FROM DUAL;

SELECT FIRST_NAME,DEPARTMENT_ID,
(CASE DEPARTMENT_ID
WHEN 10 THEN 'ADMINISTRATOR'
WHEN 20 THEN 'DEVELOPERS'
WHEN 30 THEN 'SHIPPING'
WHEN 40 THEN 'BANKING'
WHEN 50 THEN 'EDUCATIONAL'
ELSE 'SORRY:)'
END ) AS DEPARTMENT

FROM HR.EMPLOYEES
WHERE DEPARTMENT_ID BETWEEN 10 AND 50 ORDER BY 2;

-- GROUP FUNCTION IN ORACLE
SELECT first_name,SALARY FROM HR.EMPLOYEES WHERE SALARY = (SELECT MAX(SALARY) FROM HR.EMPLOYEES);
-- SUM
SELECT SUM(SALARY) TOTAL_SALARY FROM HR.EMPLOYEES;
-- AVG
SELECT ROUND(AVG(SALARY)) AVERAGE_SAL FROM HR.EMPLOYEES;
--MAX
SELECT MAX(SALARY) MAX_SALARY FROM HR.EMPLOYEES;
--MIN
SELECT MIN(SALARY) MIN_SALARY FROM HR.EMPLOYEES;
--COUNT
SELECT COUNT(MANAGER_ID) TOTAL_RECORDS FROM HR.EMPLOYEES;
SELECT COUNT(*) TOTAL_RECORDS FROM HR.EMPLOYEES;
SELECT COUNT(DISTINCT SALARY) FROM HR.EMPLOYEES;
-- STDDEV
SELECT STDDEV(SALARY)"STANDERD DEVIATION" FROM HR.EMPLOYEES;
-- VARIANCE
SELECT VARIANCE(SALARY) FROM HR.EMPLOYEES; 
--GROUP BY AND HAVING CLAUSE

SELECT * FROM HR.EMPLOYEES;
SELECT JOB_ID,MAX(SALARY) MAX_SALARY,COUNT(*) No_Emp FROM HR.EMPLOYEES GROUP BY JOB_ID;

SELECT * FROM HR.EMPLOYEES;

SELECT DEPARTMENT_ID , COUNT(EMPLOYEE_ID) "TOTAL EMPLOYEE" FROM HR.EMPLOYEES 
GROUP BY DEPARTMENT_ID HAVING MAX(SALARY) > 3000 ORDER BY 1 DESC;

CREATE TABLE CUSTOMER
(
 ID NUMBER PRIMARY KEY,
 FIRST_NAME VARCHAR2(300),
 LAST_NAME VARCHAR2(200),
 CITY VARCHAR2(300),
 COUNTRY VARCHAR2(30),
 PHONE NUMBER(10)
 );

INSERT INTO CUSTOMER VALUES (&ID,'&FIRST_NAME','&LAST_NAME','&CITY','&COUNTRY',&PHONE);
SELECT * FROM CUSTOMER;

CREATE TABLE ORDERS 
(
 ID NUMBER REFERENCES CUSTOMER(ID),
 ORDER_DATE DATE DEFAULT SYSDATE,
 ORDER_NUMBER NUMBER,
 CUST_ID NUMBER,
 TOTAL_AMOUNT NUMBER
 );

INSERT INTO ORDERS(ID,ORDER_NUMBER,CUST_ID,TOTAL_AMOUNT) VALUES(&ID,&ORDER_NUMBER,&CUST_ID,&TOTAL_AMOUNT);
SELECT * FROM ORDERS;
--Problem: List the total amount ordered for each customer 
SELECT C.ID,C.FIRST_NAME,C.LAST_NAME,SUM(O.TOTAL_AMOUNT) TOTAL_PURCHASE,COUNT(O.ID) FREQUENCY
FROM CUSTOMER C JOIN ORDERS O 
ON (C.ID = O.ID) 
WHERE C.ID BETWEEN 1 AND 2 
GROUP BY FIRST_NAME,LAST_NAME,C.ID 
HAVING COUNT(O.ID) >=2
ORDER BY 3 DESC;

SELECT C.FIRST_NAME,C.LAST_NAME,SUM(O.TOTAL_AMOUNT) FROM CUSTOMER C JOIN ORDERS O 
ON(C.ID = O.ID)
WHERE C.ID BETWEEN 1 AND 2  
GROUP BY C.FIRST_NAME,C.LAST_NAME;










